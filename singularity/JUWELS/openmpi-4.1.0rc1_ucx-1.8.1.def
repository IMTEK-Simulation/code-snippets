Bootstrap: docker
From: ubuntu:18.04

%post

    export SING_HWLOC_VERSION=2.2.0 # like JUWELS
    export SING_LIBEVENT_VERSION=2.1.12 # like JUWELS
    export SING_SLURM_VERSION=20.02.6 # like JUWELS
    export SING_UCX_VERSION=1.8.1 # like JUWELS
    export SING_OMPI_VERSION=4.1.0rc1 # like JUWELS
    export SING_MPI4PY_VERSION=3.0.3 

    # Set environment variable to contain /usr/local
    export PATH=/usr/local/bin:$PATH
    export LD_RUN_PATH=/usr/lib64:/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=/usr/lib64:/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
    export MANPATH=/usr/local/share/man:$MANPATH

    # For apt to be noninteractive
    export DEBIAN_FRONTEND=noninteractive
    export DEBCONF_NONINTERACTIVE_SEEN=true

    # Note: gfortran is necessary even if Fortran is not required, because
    # PnetCDF does not compute compile if OpenMPI does not have Fortran
    # support.
    apt-get update
    apt-get install -y software-properties-common strace libnuma-dev libibverbs-dev libssl-dev curl wget git bash make file pkg-config gcc g++ gfortran python3-dev python3-pip

    # Download, compile and install HWLOC
    curl -L https://download.open-mpi.org/release/hwloc/v2.2/hwloc-${SING_HWLOC_VERSION}.tar.bz2 | tar -xjC /tmp
    cd /tmp/hwloc-${SING_HWLOC_VERSION}
    ./configure --prefix=/usr/local
    make -j 4
    make install

    # Download, compile and install LIBEVENT
    curl -L https://github.com/libevent/libevent/releases/download/release-${SING_LIBEVENT_VERSION}-stable/libevent-${SING_LIBEVENT_VERSION}-stable.tar.gz | tar -xzC /tmp
    cd /tmp/libevent-${SING_LIBEVENT_VERSION}-stable
    ./configure --prefix=/usr/local
    make -j 4
    make install

    # Download, compile and install UCX
    # Check compile options of native UCX on JUWELS with `ucx_info -b`.
    curl -L https://github.com/openucx/ucx/releases/download/v${SING_UCX_VERSION}/ucx-${SING_UCX_VERSION}.tar.gz | tar -xzC /tmp
    cd /tmp/ucx-${SING_UCX_VERSION}
    ./configure --prefix=/usr/local --without-java --disable-doxygen-doc --enable-mt --enable-optimizations --disable-debug --disable-logging --disable-assertions --disable-params-check --disable-dependency-tracking --enable-cma --with-verbs --with-rc --with-ud --with-dc --with-mlx5-dv --with-ib-hw-tm --with-dm --without-cm --with-avx
    make -j 4
    make install

    # Download SLURM - needed for PMI2
    curl -L https://download.schedmd.com/slurm/slurm-${SING_SLURM_VERSION}.tar.bz2 | tar -xjC /tmp
    cd /tmp/slurm-${SING_SLURM_VERSION}
    ./configure --prefix=/usr/local
    cd contribs/pmi2
    make -j 4
    make install

    # Download, compile and install OpenMPI
    # Slurm handles starting of processes and initial communication with the
    # process runs through PMI2 or PMIX. We also disable verbs because this
    # leads to warnings that it is not being used anyway.
    # Check compile options of native OpenMPI on JUWELS with `ompi_info`.
    curl -L https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${SING_OMPI_VERSION}.tar.bz2 | tar -xjC /tmp
    cd /tmp/openmpi-$SING_OMPI_VERSION
    ./configure --prefix=/usr/local --enable-shared --without-orte --disable-oshmem --without-verbs --without-psm2 --with-ucx=/usr/local --with-slurm --with-pmi=/usr/local --with-hwloc=external --with-pmix=internal --with-libevent=external --with-ompi-pmix-rte
    make -j 4
    make install

    # Install mpi4py
    python3 -m pip install --no-binary mpi4py mpi4py==${SING_MPI4PY_VERSION}

    # Clone and compile MPI benchmark
    cd /opt
    git clone https://github.com/LLNL/mpiBench.git
    cd mpiBench
    make

%environment

    export PATH=/usr/local/bin:$PATH
    export LD_RUN_PATH=/usr/lib64:/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=/usr/lib64:/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH
    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
    export MANPATH=/usr/local/share/man:$MANPATH

%runscript

    python3 "$@" 
